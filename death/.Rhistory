#install.packages("RCurl")
library(XML)
library(RmecabKo)
#install_mecab('C:/RmecabKo/mecab')
library(wordcloud2)
library(RCurl)
Client_ID='pbjYjx5vQUT6AWHokqKY'
Client_Secret='BbB8bC34s5'
search_url= 'https://openapi.naver.com/v1/search/blog.xml'
query = URLencode('전남대학교')
query
display= 20
url = paste(search_url,'?query=',query,'&display=',display, sep= '')
url
doc = getURL(url,
httpheader = c('X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret),
verbose = TRUE)
xmlfile = xmlParse(doc)
xmlfile
df = xmlToDataFrame(getNodeSet(xmlfile, '//item'))
df
dsecription = df$description
dsecription2= gsub('<b>|</b>'|\\d|&quot;, '', dsecription)
dsecription2= gsub('<b>|</b>'|\\d|&quot;, '', dsecription)
dsecription2= gsub('<b>|</b>|\\d|&quot;', '', dsecription)
#install.packages("XML")
#install.packages("RmecabKo")
#install.packages("wordcloud2")
#install.packages("RCurl")
library(XML)
library(RmecabKo)
#install_mecab('C:/RmecabKo/mecab')
library(wordcloud2)
library(RCurl)
Client_ID='pbjYjx5vQUT6AWHokqKY'
Client_Secret='BbB8bC34s5'
search_url= 'https://openapi.naver.com/v1/search/blog.xml'
query = URLencode('전남대학교')
query
display= 20
url = paste(search_url,'?query=',query,'&display=',display, sep= '')
url
doc = getURL(url,
httpheader = c('X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret),
verbose = TRUE)
xmlfile = xmlParse(doc)
xmlfile
df = xmlToDataFrame(getNodeSet(xmlfile, '//item'))
df
dsecription = df$description
dsecription2= gsub('<b>|</b>|\\d|&quot;', '', dsecription)
#install.packages("XML")
#install.packages("RmecabKo")
#install.packages("wordcloud2")
#install.packages("RCurl")
library(XML)
library(RmecabKo)
#install_mecab('C:/RmecabKo/mecab')
library(wordcloud2)
library(RCurl)
Client_ID='pbjYjx5vQUT6AWHokqKY'
Client_Secret='BbB8bC34s5'
search_url= 'https://openapi.naver.com/v1/search/blog.xml'
query = URLencode('전남대학교')
query
display= 20
url = paste(search_url,'?query=',query,'&display=',display, sep= '')
url
doc = getURL(url,
httpheader = c('X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret),
verbose = TRUE)
xmlfile = xmlParse(doc)
xmlfile
df = xmlToDataFrame(getNodeSet(xmlfile, '//item'))
df
desecription = df$description
desecription2= gsub('<b>|</b>|\\d|&quot;', '', dsecription)
dsecription2
nouns= nouns(dsecription2)
nouns
nouns.all = unlist(nouns, use_names = FALSE)
nouns.all = unlist(nouns, use.names = FALSE)
nouns.all
nchar(nouns.all)
nchar(nouns.all) >=2
nouns.all2 = nouns.all[nchar(nouns.all) >=2]
nouns.all2
table(nouns.all2)
freq_df = data.frame(table(nouns.all2))
freq_df
order(freq_df)
nouns.freq = table(nouns.all2)
nouns.all2 = nouns.all[nchar(nouns.all) >=2]
nouns.freq = table(nouns.all2)
nouns.freq
freq_df = data.frame(table(nouns.all2))
freq_df
freq_df_order
order(freq_df$Freq)
freq_df_order
freq_df[order(freq_df$Freq),]
freq_df[order(-freq_df$Freq),]
nouns.df.sort = freq_df[order(-freq_df$Freq),]
wordcolud2(nouns.df.sort, size=1, rotateRatio= 0.5)
wordcloud2(nouns.df.sort, size=1, rotateRatio= 0.5)
wordcloud2(nouns.df.sort, size=1, rotateRatio= 0.5, shape= 'star')
freq_df
wordcloud2(nouns.df.sort, size=1, rotateRatio= 0.5, shape= 'star')
nouns.df.sort = freq_df[order(freq_df$Freq),]
wordcloud2(nouns.df.sort, size=1, rotateRatio= 0.5, shape= 'star')
nouns.df.sort = freq_df[order(-freq_df$Freq),]
wordcloud2(nouns.df.sort, size=1, rotateRatio= 0.5, shape= 'star')
W <- c("가","나", "다", "라", "마", "바", "사", "아", "자", "차")
X <- c(1,2,3,NA,5,6,7,8,9,0)
Y <- c(10,20,NULL,40,50,NaN,70,80,90,100,110)
Z <- c(5,10/0,Inf,-20/0,-Inf,0/0,NaN,40,45,50)
df= data.frame(W,X,Y,Z)
df
str(df)
summary(df)
nzchar(df$W)
df
empty <- apply(df.2.nzchar)
W <- c("가","나", "", "라", "마", "바", "사", "아", "자", "차")
nzchar(df$W)
W <- c("가","나", " ", "라", "마", "바", "사", "아", "자", "차")
df= data.frame(W,X,Y,Z)
nzchar(df$W)
W <- c("가","나", "", "라", "마", "바", "사", "아", "자", "차")
df= data.frame(W,X,Y,Z)
nzchar(df$W)
empty <- apply(df.2.nzchar)
empty <- apply(df,2,nzchar)
empty
colSums(df)
W <- c("가","나", "", "라", "마", "바", "사", "아", "자", "차")
X <- c(1,2,3,NA,5,6,7,8,9,0)
Y <- c(10,20,NULL,40,50,NaN,70,80,90,100,110)
Z <- c(5,10/0,Inf,-20/0,-Inf,0/0,NaN,40,45,50)
df= data.frame(W,X,Y,Z)
df
iris
summary(iris)
installpackage('GGally')
install.package('GGally')
install.packages('GGally')
install.package('dplyr')
install.packages('dplyr')
library(dplyr)
W <- c("가","나", "", "라", "마", "바", "사", "아", "자", "차")
X <- c(1,2,3,NA,5,6,7,8,9,0)
Y <- c(10,20,NULL,40,50,NaN,70,80,90,100,110)
Z <- c(5,10/0,Inf,-20/0,-Inf,0/0,NaN,40,45,50)
df= data.frame(W,X,Y,Z)
df
#install.packages('GGally')
library(GGallY)
library(GGally)
W <- c("가","나", "", "라", "마", "바", "사", "아", "자", "차")
X <- c(1,2,3,NA,5,6,7,8,9,0)
Y <- c(10,20,NULL,40,50,NaN,70,80,90,100,110)
Z <- c(5,10/0,Inf,-20/0,-Inf,0/0,NaN,40,45,50)
df= data.frame(W,X,Y,Z)
df
#install.packages('GGally')
library(GGally)
ggpairs(data = iris,
columns = 1:4,
aes(color = Species,
alpha = 0.5))
#install.packages('dplyr')
library(dplyr)
df2= filter(df,)
df1= data.frame(ID = 1:3,
성명 = c('장발장','자베르','팡틴'))
df2 = data.frame(ID=2:4 ,
성명 = c (7,5,10))
df1
df2
inner_join(df1,df2, by ='ID')
full_join(df1,df2, by ='ID')
left_join(df1,df2, by ='ID')
right_join(df1,df2, by ='ID')
library(ggplot2)
iteration =1000
prob=0
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면").1.replace=T)
coin <- sample(c("앞면", "뒷면"),1.replace=T)
coin <- sample(c("앞면", "뒷면"),1,replace=T)
if(coin == "앞면")
count +=1
count = count+1
prob <- c(prob.round(count /x,2))
prob <- c(prob,round(count /x,2))
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1,replace=T)
if(coin == "앞면")
count = count+1
prob <- c(prob,round(count /x,2))
}
df.coin <- data.frame("반복수"= 1:iteration, "누적비율"= prob)
library(ggplot2)
library(ggplot2)
iteration =1000
prob=0
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1,replace=T)
if(coin == "앞면")
count = count+1
prob <- c(prob,round(count /x,2))
}
df.coin <- data.frame("반복수"= 1:iteration, "누적비율"= prob)
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob,round(count /x,2))
{
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob,round(count /x,2))
}
df.coin <- data.frame("반복수"= 1:iteration, "누적비율"= prob)
library(ggplot2)
iteration =1000
prob=0
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob, round(count /x,2))
}
df.coin <- data.frame("반복수"= 1:iteration, "누적비율"= prob)
head(df.coin)
iteration =10000
prob=0
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob, round(count /x,2))
}
df.coin <- data.frame("반복수"= 1:iteration, "누적비율"= prob)
df.coin <- data.frame(반복수= 1:iteration, 누적비율= prob)
library(ggplot2)
iteration =1000
prob=vector()
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob, round(count /x, 2))
}
df.coin <- data.frame(반복수= 1:iteration, 누적비율= prob)
head(df.coin)
ggplot(df.coin.aes(x=반복수, y=누적비율))+
geom.line(color= 'blue', size=1)+
geom_point()+
geom_hline(yintercept=0.5, color='orange')+
labs(title ='누적비율')
ggplot(df.coin,aes(x=반복수, y=누적비율))+
geom.line(color= 'blue', size=1)+
geom_point()+
geom_hline(yintercept=0.5, color='orange')+
labs(title ='누적비율')
ggplot(df.coin,aes(x=반복수, y=누적비율))+
geom.line(color= 'blue', size=1)+
geom_point()+
geom_hline(yintercept=0.5, color='orange')+
labs(title ='누적비율')
ggplot(df.coin,aes(x=반복수, y=누적비율))+
geom_line(color= 'blue', size=1)+
geom_point()+
geom_hline(yintercept=0.5, color='orange')+
labs(title ='누적비율')
install.pacakages('ggforce')
install.packages('ggforce')
library(ggforce)
pi
library(ggforce)
iteration=1000
N.circle=0
PI = NULL
pts= NULL
library(ggplot2)
iteration =1000
prob=vector()
count=0
for(x in 1:iteration)
{
coin <- sample(c("앞면", "뒷면"),1)
if(coin == "앞면")
count = count+1
prob <- c(prob, round(count /x, 2))
}
df.coin <- data.frame(반복수= 1:iteration, 누적비율= prob)
head(df.coin)
ggplot(df.coin,aes(x=반복수, y=누적비율))+
geom_line(color= 'blue', size=1)+
geom_point()+
geom_hline(yintercept=0.5, color='orange')+
labs(title ='누적비율')
#install.packages('ggforce')
library(ggforce)
iteration=1000
N.circle=0
PI = NULL
pts= NULL
for(i in 1:iteration)
{
x<-runif(1,0,1)
y<-runif(1,0,1)
pts = rbind(pts, c(x,y))
dist= sqrt(x^2+y^2)
if (dist <1)
{
N.circle <- N.circle+1
}
pi.sim = 4*N.circle/i
PI= c(PI, pi.sim)
}
install.packages("igraph")
library(igraph)
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
df.fb =read.table(file.coose(), header=FALSE)
df.fb =read.table(file.choose(), header=FALSE)
df.fb =read.table(file.choose(), header=FALSE)
library(igraph)
df.fb =read.table(file.choose(), header=FALSE)
df.fb
G.fb = graph.data.frame(df.fb)
G.fb = graph.data.frame(df.fb,directed=FALSE)
par(mar(0,0,0,0))
#install.packages("igraph")
install.packages("mar")
#install.packages("igraph")
install.packages("mAr")
library(mAr)
library(MASS)
library(mAr)
par(mar(0,0,0,0))
par(mar(0,0,0,0))
plot(G.fb,
vertex.label =NA,
vertex.size=10,
vertex.color= rgb(0,1,0,0.5))
par(mar=c(0,0,0,0))
plot(G.fb,
vertex.label =NA,
vertex.size=10,
vertex.color= rgb(0,1,0,0.5))
#1~50번째 사용자들 간의 그래프
V(G.fb)$name[1:50]
#1~50번째 사용자들 간의 그래프
v.set = V(G.fb)$name[1:50]
G.fb.part <- induced_subgraph(G.fb, v=v.set)
tkplot(G.fb.part)
G.fb.part = induced_subgraph(G.fb, v=v.set)
tkplot(G.fb.part)
G.fb = graph.data.frame(df.fb, directed=FALSE)
par(mar=c(0,0,0,0))
plot(G.fb,
vertex.label =NA,
vertex.size=10,
vertex.color= rgb(0,1,0,0.5))
tkplot(G.fb.part)
tkplot(G.fb.part)
tkplot(G.fb.part)
tkplot(G.fb.part)
tkplot(G.fb.part)
plot(G.fb.part)
tkplot(G.fb.part,
vertex.loabel.cex=1.5,
vertex.size=degree(G.fb.part)*1.2,
vertex.color= 'yellow',
vertex.frame.color='gray')
tkplot(G.fb.part,
vertex.loabel.cex=1.5,
vertex.size=degree(G.fb.part)*1.2,
vertex.color= 'yellow',
vertex.frame.color='gray')
#ID가 1인 사용자와 연결된 그래프
v1 =
V(G.fb)$name == '1'
#ID가 1인 사용자와 연결된 그래프
v1 =V(G.fb)$name == '1'
v1
#ID가 1인 사용자와 연결된 그래프
which(v1 =V(G.fb)$name == '1')
#ID가 1인 사용자와 연결된 그래프
v1= which(V(G.fb)$name == '1')
v1
#ID가 1인 사용자와 연결된 그래프
v2= which(V(G.fb)$name == '1')
v2
V.set = neighbors(G.fb, v= v2)
v.set
setwd("C:/Users/chech/Desktop/death/death")
# 초기화
from2008_to_2022 = list()
# 2004년부터 2022년까지 반복
for(year in 2008:2022) {
filelist = choose.files()
datalist = lapply(filelist, function(x) read.table(x, sep=",", fileEncoding="cp949"))
from2008_to_2022[[as.character(year)]] = do.call("rbind", datalist)
}
# plyr 패키지 로드
library(gtools)
# smartbind를 사용하여 모든 데이터 프레임을 하나로 합치기
death = do.call(smartbind, from2008_to_2022)
# 열 이름 지정
names(death) = c("신고_년", "신고_월", "신고_일", "주소지", "사망연월일", "사망시간", "사망장소", "사망자직업", "혼인상태", "교육정도", "성별", "사망연령", "사망원인1", "사망원인2")
# 결과 확인
head(death)
# '사망연월일' 열을 년도, 월, 일로 분리
death$년도 <- substr(death$사망연월일, 1, 4)
death$월 <- substr(death$사망연월일, 5, 6)
death$일 <- substr(death$사망연월일, 7, 8)
# '사망연월일' 열 제거
death$사망연월일 <- NULL
# 열 이름 다시 지정
names(death) <- c("신고_년", "신고_월", "신고_일", "주소지", "사망시간", "사망장소", "사망자직업", "혼인상태", "교육정도", "성별", "사망연령", "사망원인1", "사망원인2", "사망_년", "사망_월", "사망_일")
# 결과 확인
head(death)
#사망원인중 자살 추출하여 데이터셋 생성
num<-600:849
num<-paste0("X",num)
suicide<-data.frame()
for(i in 1:length(num)){
death_cond = combined_data[combined_data$사망원인2==num[i],]
suicide<-rbind(suicide,death_cond)
}
for(i in 1:length(num)){
death_cond = death[death$사망원인2==num[i],]
suicide<-rbind(suicide,death_cond)
}
View(suicide)
#사망원인중 자살 추출하여 데이터셋 생성
num <- 600:849
num <- paste0("X", num)
# 벡터화된 조건을 사용하여 자살 사례 추출
suicide <- death[death$사망원인2 %in% num, ]
str(death)
summary(death)
View(death)
# 총 데이터 개수(사망 건수)
Dcount <- nrow(death)
Dcount
str(suicide)
summary(suicide)
#자살 데이터 개수(자살 건수)
Scount <- nrow(suicide)
Scount
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
pop <- read.csv("연앙인구.csv")
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
pop <- read.table("연앙인구.csv", header = TRUE, sep = ",", fill = TRUE)
View(pop)
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
View(pop)
View(pop)
View(pop)
View(pop)
pop <- read.csv("연앙인구.csv", header = TRUE, sep = ",", fill = TRUE)
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
pop1 <- t(pop[,c(-2,-3,-4)])
sumpop <- c(pop1[seq(2,16,2),]+pop1[seq(3,17,2),])
pop <- read.csv("연앙인구.csv", stringsAsFactor=FALSE)
pop
pop <- read.csv("연앙인구.csv")
pop
age = c("10대 미만", "10대", "20대", "30대", "40대", "50대", "60대", "70대", "80대","90대", "100세 이상")
rownames(pop) <- age[1:10]
rownames(pop) <- age[1:111]
rownames(pop) <- age[1:11]
rownames(pop) <- age[1:9]
pop
pop
pop
rownames(pop) <- age[1:11]
pop <- read.csv("연앙인구.csv")
pop
View(pop)
age = c("10대 미만", "10대", "20대", "30대", "40대", "50대", "60대", "70대", "80대","90대")
View(pop)
pop <- read.csv("연앙인구.csv")
View(pop)
View(pop)
View(pop)
pop <- read.csv("2008.csv")
View(pop)
pop <- read.csv("연앙인구.csv")
